<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library</name>
    </assembly>
    <members>
        <member name="T:NavalBattle.Admin">
            <summary>
            Clase encargada de crear y contener las partidas en juego, ademáas de agregar usuarios a la lista de espera.
            </summary>
        </member>
        <member name="F:NavalBattle.Admin.admin">
            <summary>
            Se utiliza singleton para admin.
            </summary>
        </member>
        <member name="F:NavalBattle.Admin.matchList">
            <summary>
            Lista donde se guardan las partidas.
            </summary>
            <typeparam name="Match">Partida.</typeparam>
            <returns></returns>
        </member>
        <member name="M:NavalBattle.Admin.getAdmin">
            <summary>
            Singleton de Admin, si no existe una instancia la crea, y si ya existe devuelve esa misma instancia.
            </summary>
            <returns>Admin.</returns>
        </member>
        <member name="P:NavalBattle.Admin.MatchList">
            <summary>
            Gets de la lista de partidas en juego.
            </summary>
            <value></value>
        </member>
        <member name="M:NavalBattle.Admin.AddToWaitingList(NavalBattle.GameUser)">
            <summary>
            Cuando un User busca partida, si en la WaitingList hay un otro User con las mismas características
            de partida que el, se emparejan en la misma partida.
            Si no hay otro player disponible para jugar, se agrega a waitingList.
            </summary>
            <param name="user">Usuario.</param>
        </member>
        <member name="M:NavalBattle.Admin.CreateMatch(NavalBattle.GameUser,NavalBattle.GameUser)">
            <summary>
            Se crea la partida con los dos Users luego de ser emparejados.
            </summary>
            <param name="user1">Usuario 1.</param>
            <param name="user2">Usuario 2.</param>
        </member>
        <member name="T:NavalBattle.AttackGameboardPrinter">
            <summary>
            Imprime el tablero de manera que se puede visualizar donde se efectuaron los ataques y si algun barco fue tocado.
            </summary>
        </member>
        <member name="T:NavalBattle.Bomb">
            <summary>
            Clase que representa a las bombas que irán dentro del tablero.
            </summary>
        </member>
        <member name="M:NavalBattle.Bomb.#ctor(System.String)">
            <summary>
            La coordenada de la bomba se crea en Bomb por creator.
            </summary>
            <param name="stringCoord"></param>
        </member>
        <member name="P:NavalBattle.Bomb.Coord">
            <summary>
            Gets de las coordenadas de la bomba.
            </summary>
            <value></value>
        </member>
        <member name="T:NavalBattle.ClientBot">
            <summary>
            Realizamos un singleton del bot para poder llamar a los metodos del bot de telegram desde los handlers.
            </summary>
        </member>
        <member name="T:NavalBattle.Coords">
            <summary>
            Coords representa las coordenadas, que ocupan cada una una cuadrícula del tablero.
            </summary>
        </member>
        <member name="F:NavalBattle.Coords.coordsLocation">
            <summary>
            String de la coordenada.
            </summary>
        </member>
        <member name="F:NavalBattle.Coords.hasBeenAttacked">
            <summary>
            Estado de la coordenada.
            </summary>
        </member>
        <member name="M:NavalBattle.Coords.#ctor(System.String)">
            <summary>
            Constructor de Coords.
            </summary>
            <param name="aCoordsLocation"></param>
        </member>
        <member name="P:NavalBattle.Coords.CoordsLocation">
            <summary>
            Gets de CoordsLocation.
            </summary>
            <value></value>
        </member>
        <member name="P:NavalBattle.Coords.HasBeenAttacked">
            <summary>
            Gets de HasBeenAttacked.
            </summary>
            <value></value>
        </member>
        <member name="M:NavalBattle.Coords.CoordsEquals(NavalBattle.Coords)">
            <summary>
            Devuelve true si dos coordenadas son iguales.
            </summary>
            <param name="coord"></param>
            <returns></returns>
        </member>
        <member name="M:NavalBattle.Coords.ChangeCoordState">
            <summary>
            Cambia el estado de una coordena que fue atacada.
            </summary>
        </member>
        <member name="T:NavalBattle.DefenseGameboardPrinter">
            <summary>
            Imprime el tablero de manera que se puede visualizar la posicion de los barcos y si fueron tocados o no.
            </summary>
        </member>
        <member name="T:NavalBattle.Gameboard">
            <summary>
            El tablero de los jugadores, aquí se guarda todo lo que va dentro de las casillas del tablero junto a gran parte de la lógica del juego.
            </summary>
        </member>
        <member name="M:NavalBattle.Gameboard.#ctor(System.Int32)">
            <summary>
            Constructor del tablero.
            </summary>
            <param name="side">Tamaño del tablero.</param>
        </member>
        <member name="P:NavalBattle.Gameboard.Side">
            <summary>
            Gets del lado del tablero.
            </summary>
            <value></value>
        </member>
        <member name="P:NavalBattle.Gameboard.Ships">
            <summary>
            Gets de la lista de casilas con agua.
            </summary>
            <value></value>
        </member>
        <member name="P:NavalBattle.Gameboard.Water">
            <summary>
            Gets de la lista de casillas con agua.
            </summary>
            <value></value>
        </member>
        <member name="P:NavalBattle.Gameboard.Bombs">
            <summary>
            Gets de la lista de casillas con bombas.
            </summary>
            <value></value>
        </member>
        <member name="P:NavalBattle.Gameboard.WaterShoots">
            <summary>
            Gets y Sets de los disparos al agua que fueron recibidos por este tablero.
            </summary>
            <value></value>
        </member>
        <member name="P:NavalBattle.Gameboard.BoatShoots">
            <summary>
            Gets y Sets de los disparos a barcos que fueron recibidos por este tablero.
            </summary>
            <value></value>
        </member>
        <member name="M:NavalBattle.Gameboard.IsValidCoord(System.String)">
            <summary>
            Devuelve true si la coordenada se encuentra en el tablero.
            </summary>
            <param name="coordStr"></param>
            <returns></returns>
        </member>
        <member name="M:NavalBattle.Gameboard.AddShip(System.Int32,System.String,System.String)">
            <summary>
            Metodo que añade barcos al tablero. Los Ship se crean en Gameboard porque los contiene (Creator).
            </summary>
            <param name="length"></param>
            <param name="initialCoordStr"></param>
            <param name="direction"></param>
        </member>
        <member name="M:NavalBattle.Gameboard.AddWater">
            <summary>
            Añade las coordenadas donde no se posicionaron barcos a water.
            </summary>
        </member>
        <member name="M:NavalBattle.Gameboard.AddBombs">
            <summary>
            Metodo que añade bombas al tablero.
            Se Crean y añaden en Gameboard por creator.
            Precondiciones:
                Solo se añaden tres bombas cualquiera sea el tamaño del tablero.
                No puede haber dos bombas a menos de dos "casilleros" de distancia.
            </summary>
        </member>
        <member name="M:NavalBattle.Gameboard.GetGameboardToPrint">
            <summary>
            Metodo de la interfaz IGameboardContent que implementa Gameboard.
            Se aplica DIP para para imprimir los tableros de diferentes maneras dependiendo 
            de que jugador es, y quien lo quiere visualizar.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NavalBattle.Gameboard.RecieveAttack(NavalBattle.Coords)">
            <summary>
            Metodo donde se ataca a una coordenada del tablero.
            Devuelve el resultado del ataque.
            Se implementa en Gameboard ya que es la clase experta que contiene los datos.
            </summary>
            <param name="coord"></param>
            <returns></returns>
        </member>
        <member name="M:NavalBattle.Gameboard.Kaboom(NavalBattle.Coords)">
            <summary>
            Metodo que se ejecuta cuando el tablero recibe un ataque en la coordenada donde se encuentra una bomba.
            Ataca a todas las coordenadas adyacentes a ella.
            Los condicionales del metodo checkean que no se ataque a una coordenada que no existe
            en caso que la bomba se encuentre en una posicion al "borde" del tablero.
            </summary>
            <param name="coord"></param>
        </member>
        <member name="M:NavalBattle.Gameboard.IsMatchFinished">
            <summary>
            Devuelve true si todos los barcos del tablero fueron hundidos.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NavalBattle.GameUser">
            <summary>
            Clase usuario, posee atributos que luego serán utilizados por Player.
            </summary>
        </member>
        <member name="M:NavalBattle.GameUser.#ctor(System.String,System.Int64)">
            <summary>
            Constructor de GameUser.
            </summary>
            <param name="nickName"></param>
            <param name="aChatId"></param>
        </member>
        <member name="P:NavalBattle.GameUser.State">
            <summary>
            Gets y Sets de los Usuarios.
            </summary>
            <value></value>
        </member>
        <member name="P:NavalBattle.GameUser.Bombs">
            <summary>
            Gets y Sets del interruptor de bombas.
            </summary>
            <value></value>
        </member>
        <member name="P:NavalBattle.GameUser.GameboardSide">
            <summary>
            Gets y Sets del lado de Gameboard que se creará en player.
            </summary>
            <value></value>
        </member>
        <member name="P:NavalBattle.GameUser.NickName">
            <summary>
            Gets y Sets del nombre de usuario.
            </summary>
            <value></value>
        </member>
        <member name="P:NavalBattle.GameUser.Player">
            <summary>
            Gets y Sets de Player.
            </summary>
            <value></value>
        </member>
        <member name="T:NavalBattle.GameUser.UserState">
            <summary>
            Estado del usuario. Se utiliza para controlar excepciones y comandos no validos en diferentes momentos.
            Solo se controla si el usuario está en partida o no, porque los demas estdos se controlan en Gameboard.
            Por ejemplo: 
                que un jugador no pueda atacar en la fase de posicionamiento.
                que un jugador no pueda posicionar barcos en la fase de ataque.
            </summary>
        </member>
        <member name="M:NavalBattle.GameUser.SearchGame">
            <summary>
            El usuuario busca partida eligiendo las caracteristicas con las que quiere jugar.
            </summary>
            <param name="gameboardSide"></param>
            <param name="bombs"></param>
            <param name="doubleAttack"></param>
        </member>
        <member name="T:NavalBattle.AttackHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "/atacar".
            </summary>
        </member>
        <member name="M:NavalBattle.AttackHandler.#ctor(NavalBattle.BaseHandler)">
            <summary>
            Constructor de AttackHandler.
            </summary>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:NavalBattle.AttackHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "/atacar" y ataca el tablero del rival en la coordenada indicada.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="M:NavalBattle.AttackHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial. En los "handler" sin estado no hace nada. Los "handlers" que
            procesan varios mensajes cambiando de estado entre mensajes deben sobreescribir este método para volver al
            estado inicial.
            </summary>
        </member>
        <member name="M:NavalBattle.AttackHandler.CanHandle(Telegram.Bot.Types.Message)">
            <summary>
            Determina si este "handler" puede procesar el mensaje. En la clase base se utiliza el array
            <see cref="P:NavalBattle.BaseHandler.Keywords"/> para buscar el texto en el mensaje ignorando mayúsculas y minúsculas. Las
            clases sucesores pueden sobreescribir este método para proveer otro mecanismo para determina si procesan o no
            un mensaje.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <returns>true si el mensaje puede ser pocesado; false en caso contrario.</returns>
        </member>
        <member name="M:NavalBattle.AttackHandler.SendImage(Telegram.Bot.Types.Message)">
            <summary>
            Método para mandar imágenes por medio del bot.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:NavalBattle.AttackHandler.SendVoice(Telegram.Bot.Types.Message)">
            <summary>
            Método para mandar audio por medio del bot.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:NavalBattle.BaseHandler">
            <summary>
            Clase base para implementar el patrón Chain of Responsibility. En ese patrón se pasa un mensaje a través de una
            cadena de "handlers" que pueden procesar o no el mensaje. Cada "handler" decide si procesa el mensaje, o si se lo
            pasa al siguiente. Esta clase base implmementa la responsabilidad de recibir el mensaje y pasarlo al siguiente
            "handler" en caso que el mensaje no sea procesado. La responsabilidad de decidir si el mensaje se procesa o no, y
            de procesarlo, se delega a las clases sucesoras de esta clase base.
            </summary>
        </member>
        <member name="P:NavalBattle.BaseHandler.Next">
            <summary>
            Obtiene el próximo "handler".
            </summary>
            <value>El "handler" que será invocado si este "handler" no procesa el mensaje.</value>
        </member>
        <member name="P:NavalBattle.BaseHandler.Keywords">
            <summary>
            Obtiene o asigna el conjunto de palabras clave que este "handler" puede procesar.
            </summary>
            <value>Un array de palabras clave.</value>
        </member>
        <member name="M:NavalBattle.BaseHandler.#ctor(NavalBattle.IHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:NavalBattle.BaseHandler"/>.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:NavalBattle.BaseHandler.#ctor(System.String[],NavalBattle.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:NavalBattle.BaseHandler"/> con una lista de comandos.
            </summary>
            <param name="keywords">La lista de comandos.</param>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:NavalBattle.BaseHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Este método debe ser sobreescrito por las clases sucesores. La clase sucesora procesa el mensaje y retorna
            true o no lo procesa y retorna false.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario</returns>
        </member>
        <member name="M:NavalBattle.BaseHandler.InternalCancel">
            <summary>
            Este método puede ser sobreescrito en las clases sucesores que procesan varios mensajes cambiando de estado
            entre mensajes deben sobreescribir este método para volver al estado inicial. En la clase base no hace nada.
            </summary>
        </member>
        <member name="M:NavalBattle.BaseHandler.CanHandle(Telegram.Bot.Types.Message)">
            <summary>
            Determina si este "handler" puede procesar el mensaje. En la clase base se utiliza el array
            <see cref="P:NavalBattle.BaseHandler.Keywords"/> para buscar el texto en el mensaje ignorando mayúsculas y minúsculas. Las
            clases sucesores pueden sobreescribir este método para proveer otro mecanismo para determina si procesan o no
            un mensaje.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <returns>true si el mensaje puede ser pocesado; false en caso contrario.</returns>
        </member>
        <member name="M:NavalBattle.BaseHandler.Handle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje o la pasa al siguiente "handler" si existe.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>El "handler" que procesó el mensaje si el mensaje fue procesado; null en caso contrario.</returns>
        </member>
        <member name="M:NavalBattle.BaseHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial. En los "handler" sin estado no hace nada. Los "handlers" que
            procesan varios mensajes cambiando de estado entre mensajes deben sobreescribir este método para volver al
            estado inicial.
            </summary>
        </member>
        <member name="T:NavalBattle.BoatShootsCounterHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "/disparosbarcos".
            </summary>
        </member>
        <member name="M:NavalBattle.BoatShootsCounterHandler.#ctor(NavalBattle.BaseHandler)">
            <summary>
            Constructor de BoatShootsCounterHandler.
            </summary>
            <param name="next">El próximo handler.</param>
            <returns></returns>
        </member>
        <member name="M:NavalBattle.BoatShootsCounterHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "/disparosbarcos", terminando la partida y dándole la victoria al otro jugador.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="M:NavalBattle.BoatShootsCounterHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial. En los "handler" sin estado no hace nada. Los "handlers" que
            procesan varios mensajes cambiando de estado entre mensajes deben sobreescribir este método para volver al
            estado inicial.
            </summary>
        </member>
        <member name="T:NavalBattle.CancelHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "/cancelar".
            </summary>
        </member>
        <member name="M:NavalBattle.CancelHandler.#ctor(NavalBattle.BaseHandler)">
            <summary>
            Constructor de CancelHandler.
            </summary>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:NavalBattle.CancelHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "/cancelar" y remueve al usuario de la lista de espera.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="M:NavalBattle.CancelHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial. En los "handler" sin estado no hace nada. Los "handlers" que
            procesan varios mensajes cambiando de estado entre mensajes deben sobreescribir este método para volver al
            estado inicial.
            </summary>
        </member>
        <member name="T:NavalBattle.GameStartHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "/buscarpartida".
            </summary>
        </member>
        <member name="M:NavalBattle.GameStartHandler.#ctor(NavalBattle.BaseHandler)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="!:GoodByeHandler"/>. Esta clase procesa el mensaje "chau"
            y el mensaje "adiós" -un ejemplo de cómo un "handler" puede procesar comandos con sinónimos.
            </summary>
            <param name="next">El próximo "handler".</param>
        </member>
        <member name="M:NavalBattle.GameStartHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "/buscarpartida" y coloca al jugador en una lista de espera hasta que haya otro con sus mismos settings que desee jugar.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="M:NavalBattle.GameStartHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial. En los "handler" sin estado no hace nada. Los "handlers" que
            procesan varios mensajes cambiando de estado entre mensajes deben sobreescribir este método para volver al
            estado inicial.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:NavalBattle.IHandler" -->
        <member name="P:NavalBattle.IHandler.Next">
            <summary>
            Obtiene el próximo "handler".
            </summary>
            <value>El "handler" que será invocado si este "handler" no procesa el mensaje.</value>
        </member>
        <member name="M:NavalBattle.IHandler.Handle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje o la pasa al siguiente "handler" si existe.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>El "handler" que procesó el mensaje si el mensaje fue procesado; null en caso contrario.</returns>
        </member>
        <member name="M:NavalBattle.IHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial y cancela el próximo "handler" si existe. Es utilizado para que los
            "handlers" que procesan varios mensajes cambiando de estado entre mensajes puedan volver al estado inicial en
            caso de error por ejemplo.
            </summary>
        </member>
        <member name="T:NavalBattle.MenuHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa los comandos "/cambiartablero" y "/bombas".
            </summary>
        </member>
        <member name="M:NavalBattle.MenuHandler.#ctor(NavalBattle.BaseHandler)">
            <summary>
            Constructor de MenuHandler.
            </summary>
            <param name="next">El próximo handler.</param>
            <returns>MenuHandler.</returns>
        </member>
        <member name="M:NavalBattle.MenuHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa los mensajes "/cambiartablero" y "/bombas" y despliega las opciones para prenderlos y apagarlos.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="M:NavalBattle.MenuHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial. En los "handler" sin estado no hace nada. Los "handlers" que
            procesan varios mensajes cambiando de estado entre mensajes deben sobreescribir este método para volver al
            estado inicial.
            </summary>
        </member>
        <member name="T:NavalBattle.MenuHandler.menuState">
            <summary>
            Estado del menu.
            </summary>
        </member>
        <member name="T:NavalBattle.PlaceShipHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "/posicionar".
            </summary>
        </member>
        <member name="M:NavalBattle.PlaceShipHandler.#ctor(NavalBattle.BaseHandler)">
            <summary>
            Constructor de PlaceShipHandler.
            </summary>
            <param name="next">El próximo handler.</param>
            <returns>PlaceShipHandler.</returns>
        </member>
        <member name="M:NavalBattle.PlaceShipHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "/posicionar" y procede a colocar el barco en la coordenada indicada por el jugador.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="M:NavalBattle.PlaceShipHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial. En los "handler" sin estado no hace nada. Los "handlers" que
            procesan varios mensajes cambiando de estado entre mensajes deben sobreescribir este método para volver al
            estado inicial.
            </summary>
        </member>
        <member name="T:NavalBattle.PrintGameboardHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "/vertableros".
            </summary>
        </member>
        <member name="M:NavalBattle.PrintGameboardHandler.#ctor(NavalBattle.BaseHandler)">
            <summary>
            Constructor de PrintGameBoardHandler.
            </summary>
            <param name="next">Próximo Handler.</param>
            <returns>PrintGameboardHandler.</returns>
        </member>
        <member name="M:NavalBattle.PrintGameboardHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "/vertableros" y le muestra al usuario el tablero con sus barcos y el tablero donde ha atacado.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="M:NavalBattle.PrintGameboardHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial. En los "handler" sin estado no hace nada. Los "handlers" que
            procesan varios mensajes cambiando de estado entre mensajes deben sobreescribir este método para volver al
            estado inicial.
            </summary>
        </member>
        <member name="T:NavalBattle.SurrenderHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "/rendirse".
            </summary>
        </member>
        <member name="M:NavalBattle.SurrenderHandler.#ctor(NavalBattle.BaseHandler)">
            <summary>
            Constructor de SurrenderHandler.
            </summary>
            <param name="next">El próximo handler.</param>
            <returns></returns>
        </member>
        <member name="M:NavalBattle.SurrenderHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "/rendirse", terminando la partida y dándole la victoria al otro jugador.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="M:NavalBattle.SurrenderHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial. En los "handler" sin estado no hace nada. Los "handlers" que
            procesan varios mensajes cambiando de estado entre mensajes deben sobreescribir este método para volver al
            estado inicial.
            </summary>
        </member>
        <member name="T:NavalBattle.UserRegisterHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "/start".
            </summary>
        </member>
        <member name="M:NavalBattle.UserRegisterHandler.#ctor(NavalBattle.BaseHandler)">
            <summary>
            Constructor de UserRegisterHandler.
            </summary>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:NavalBattle.UserRegisterHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "/start" y si el usuario no aparece en la lista de usuarios registrados lo registra y despliega el menú de opciones.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="M:NavalBattle.UserRegisterHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial. En los "handler" sin estado no hace nada. Los "handlers" que
            procesan varios mensajes cambiando de estado entre mensajes deben sobreescribir este método para volver al
            estado inicial.
            </summary>
        </member>
        <member name="T:NavalBattle.WaterShootsCounterHandler">
            <summary>
            Un "handler" del patrón Chain of Responsibility que implementa el comando "/disparosagua".
            </summary>
        </member>
        <member name="M:NavalBattle.WaterShootsCounterHandler.#ctor(NavalBattle.BaseHandler)">
            <summary>
            Constructor de WaterShootsHandler.
            </summary>
            <param name="next">El próximo handler.</param>
            <returns></returns>
        </member>
        <member name="M:NavalBattle.WaterShootsCounterHandler.InternalHandle(Telegram.Bot.Types.Message,System.String@)">
            <summary>
            Procesa el mensaje "/disparosagua", terminando la partida y dándole la victoria al otro jugador.
            </summary>
            <param name="message">El mensaje a procesar.</param>
            <param name="response">La respuesta al mensaje procesado.</param>
            <returns>true si el mensaje fue procesado; false en caso contrario.</returns>
        </member>
        <member name="M:NavalBattle.WaterShootsCounterHandler.Cancel">
            <summary>
            Retorna este "handler" al estado inicial. En los "handler" sin estado no hace nada. Los "handlers" que
            procesan varios mensajes cambiando de estado entre mensajes deben sobreescribir este método para volver al
            estado inicial.
            </summary>
        </member>
        <member name="T:NavalBattle.IGameboardContent">
            <summary>
            Interfaz que implementa la clase Gameboard con el objetivo de aplicar DIP.
            </summary>
        </member>
        <member name="M:NavalBattle.IGameboardContent.GetGameboardToPrint">
            <summary>
            Devuelve el tablero en forma de matriz.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NavalBattle.InvalidCoordException">
            <summary>
            Excepción que se lanza cuando un jugador introduce una coordenada inválida.
            </summary>
        </member>
        <member name="T:NavalBattle.InvalidStateException">
            <summary>
            Excepción que se lanza cuando se quiere ingresar un comando en un momento en el que no se quiere lanzar.
            </summary>
        </member>
        <member name="T:NavalBattle.IPrinter">
            <summary>
            Interfaz para la impresión.
            </summary>
        </member>
        <member name="M:NavalBattle.IPrinter.PrintGameboard(NavalBattle.IGameboardContent)">
            <summary>
            Método para imprimir tableros, que requiere un objeto del tipo IGameboardContent.
            </summary>
            <param name="gameboardContent"></param>
            <returns></returns>
        </member>
        <member name="T:NavalBattle.Player">
            <summary>
            Player es una intancia de los usuarios cuando se crea un Match.
            </summary>
        </member>
        <member name="F:NavalBattle.Player.counterShipLength">
            <summary>
            Este atributo es el largo de los barcos que se van posicionar. El primer barco es de largo 2, 
            el segundo de largo 3 y el tercero de largo 4.
            </summary>
        </member>
        <member name="M:NavalBattle.Player.#ctor(System.Int32,System.Int64)">
            <summary>
            Constructor de Player.
            </summary>
            <param name="gameboardSide"></param>
            <param name="id"></param>
        </member>
        <member name="P:NavalBattle.Player.ChatIdPlayer">
            <summary>
            Gets de la Id del jugador.
            </summary>
            <value></value>
        </member>
        <member name="P:NavalBattle.Player.CounterShipLength">
            <summary>
            Gets del contador del largo del barco.
            </summary>
            <value></value>
        </member>
        <member name="P:NavalBattle.Player.Gameboard">
            <summary>
            Gets del gameboard para el jugador.
            </summary>
            <value></value>
        </member>
        <member name="P:NavalBattle.Player.Turn">
            <summary>
            Gets del turno del jugador.
            </summary>
            <value></value>
        </member>
        <member name="M:NavalBattle.Player.PlaceShip(System.String,System.String)">
            <summary>
            Metodo para posicionar barco en tablero propio.
            </summary>
            <param name="initialCoord"></param>
            <param name="direction"></param>
        </member>
        <member name="M:NavalBattle.Player.Attack(System.String,NavalBattle.Gameboard)">
            <summary>
            Metodo para atacar tablero de otro jugador.
            </summary>
            <param name="coordStr"></param>
            <param name="gameboard"></param>
            <returns></returns>
        </member>
        <member name="M:NavalBattle.Player.ChangeTurn">
            <summary>
            Cambia el turno del jugador.
            </summary>
        </member>
        <member name="M:NavalBattle.Player.WaterShoots">
            <summary>
            Método que devuelve los disparos al agua que han ocurrido dentro del tablero del jugador.
            Utiliza el patrón de Demeter para que evitar que se tenga que conocer al tablero completo cuando solo se requiere este dato.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NavalBattle.Player.BoatShoots">
            <summary>
            Método que devuelve los disparos a barcos que han ocurrido dentro del tablero del jugador.
            Utiliza el patrón de Demeter para que evitar que se tenga que conocer al tablero completo cuando solo se requiere este dato.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NavalBattle.IJsonConvertible">
            <summary>
            Interfaz para implementar la serialización de Json.
            </summary>
        </member>
        <member name="M:NavalBattle.IJsonConvertible.ConvertToJson">
            <summary>
            Método para serializar objetos a Json.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NavalBattle.IJsonConvertible.LoadFromJson(System.String)">
            <summary>
            Método para convertir strings en formato Json a texto.
            </summary>
            <param name="json"></param>
        </member>
        <member name="T:NavalBattle.JsonSerializerUtils">
            <summary>
            Clase donde reside la mayoría del código relacionado a la serialización/deserialización de Json.
            </summary>
        </member>
        <member name="M:NavalBattle.JsonSerializerUtils.SerializeUsers">
            <summary>
            Método para serializar objetos GameUser a formato Json.
            </summary>
        </member>
        <member name="M:NavalBattle.JsonSerializerUtils.DeserializeUsers">
            <summary>
            Método para deserializar strings en formato Json a objetos GameUser.
            </summary>
        </member>
        <member name="T:NavalBattle.Ship">
            <summary>
            Clase que representa a los barcos que van dentro del tablero.
            </summary>
        </member>
        <member name="M:NavalBattle.Ship.#ctor(System.Int32,System.String)">
            <summary>
            Constructor del barco.
            </summary>
            <param name="length"></param>
            <param name="direction"></param>
        </member>
        <member name="P:NavalBattle.Ship.Length">
            <summary>
            Gets del largo del barco.
            </summary>
            <value></value>
        </member>
        <member name="M:NavalBattle.Ship.AddShipCoord(System.String)">
            <summary>
            Añade una coordenada al barco.
            La coordenada a agregar se crea en Ship por creator.
            </summary>
            <param name="stringCoord"></param>
        </member>
        <member name="M:NavalBattle.Ship.IsSunk">
            <summary>
            //Metodo que devuelve si el barco esta hundido o no.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NavalBattle.Ship.ShipContainCoord(NavalBattle.Coords)">
            <summary>
            Devuelve true si el barco contiene la coordenada pasada por parametro.
            </summary>
            <param name="coord"></param>
            <returns></returns>
        </member>
        <member name="M:NavalBattle.Ship.RecieveDamage(NavalBattle.Coords)">
            <summary>
            Cambia el estado de la coordenada del barco que fue atacada.
            </summary>
            <param name="coord"></param>
        </member>
        <member name="T:NavalBattle.UserRegister">
            <summary>
            Clase donde se registran, buscan y guardan los usuarios.
            </summary>
        </member>
        <member name="M:NavalBattle.UserRegister.#ctor">
            <summary>
            User register llama a Setup y después es llamada por el singleton, por lo que solo se crea una vez.
            </summary>
        </member>
        <member name="P:NavalBattle.UserRegister.Instance">
            <summary>
            Singleton de UserRegister, si no posee una instancia la crea, y si ya existe la devuelve.
            </summary>
            <value></value>
        </member>
        <member name="M:NavalBattle.UserRegister.SetUp">
            <summary>
            Setup crea una nueva lista de usuarios.
            </summary>
        </member>
        <member name="M:NavalBattle.UserRegister.CreateUser(System.String,System.Int64)">
            <summary>
            Método que aplica el patrón Creator para crear y añadir un usuario a la lista de usuarios.
            </summary>
            <param name="nickName">Nombre del usuario.</param>
            <param name="id">Id del usuario.</param>
        </member>
        <member name="M:NavalBattle.UserRegister.ContainsUser(NavalBattle.GameUser)">
            <summary>
            Por la ley de demeter y para evitar el alto acoplamiento se crea este método para verificar si un usarios 
            está en la lista de usuarios y que otro objeto no deba de conocer todas la conexiones internas.
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:NavalBattle.UserRegister.Add(NavalBattle.GameUser)">
            <summary>
            Por la ley de demeter y para evitar el alto acoplamiento se crea este método para añadir usuarios a la lista
            de usuarios y además que otro objeto no deba de conocer todas la conexiones internas.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:NavalBattle.UserRegister.GetUserByNickName(System.String)">
            <summary>
            Encuentra un User en la lista de Users por su nombre.
            </summary>
            <param name="nickName">Nombre del usuario.</param>
            <returns>GameUser.</returns>
        </member>
        <member name="M:NavalBattle.UserRegister.GetUserById(System.Int64)">
            <summary>
            Encuentra un User en la lista de Users por su id.
            </summary>
            <param name="chatId">Id del chat por el que se habla con el usuario.</param>
            <returns>GameUser.</returns>
        </member>
        <member name="T:NavalBattle.WaitingList">
            <summary>
            Lista donde se agregan los usuarios que están esperando para jugar.
            </summary>
        </member>
        <member name="F:NavalBattle.WaitingList.waitingList">
            <summary>
            Lista de espera para los jugadores que no esten en partida.
            </summary>
            <typeparam name="GameUser">Usuarios.</typeparam>
            <returns></returns>
        </member>
    </members>
</doc>
